h1{
    text-align: center;
}
/* In your .marker CSS rule, set the height property to 25px and the width property to 200px */

.marker {
    height: 25px;
    width:200px;
    /* An easy way to center the marker is with the margin shorthand property.
    The margin shorthand property makes it easy to set multiple margin areas at the same time. */
    margin: auto;
    /* to add some space between the markers. */
    margin: 10px auto;
}

/* After removing the bgclr:red,add, */
/* Then, create a new CSS rule that targets the class one and set its background-color 
property to red. */

.red{
    background-color: red;
}
.green{
    background-color: green;
}
.blue{
    background-color: blue;
}

/* The linear-gradient function is very flexible -- here is the basic syntax you'll use in this tutorial:

linear-gradient(gradientDirection, color1, color2, ...);
gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl.

Now you'll apply a red-to-green gradient along a 90 degree line to the first marker.

First, in the .red CSS rule, set the background property to linear-gradient(), and pass it the value 90deg as the gradientDirection. */

.red {
    background: linear-gradient(90deg);
  }

/* You'll use the rgb function for the colors of this gradient.

In the linear-gradient function, use the rgb function to set the first color argument to pure red. */

.red {
    background: linear-gradient(90deg,rgb(255,0,0));
  }

/* You won't see gradient yet because the linear-gradient function needs at least two color arguments to work.

In the same linear-gradient function, use the rgb function to set the second color argument to pure green. */

.red {
    background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0,255,0));
  }

/* Use the rgb function to add pure blue as the third color argument to the linear-gradient function. */

.red {
    background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0, 255, 0), rgb(0,0,255));
  }

/* Update like this, */
.red {
  background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(0, 0, 255) 100%);
}

/* Finally, modify the third color argument in the linear-gradient function, which is currently pure blue.

Update the rgb function so the value for red is 162, the value of green is 27, and the value of blue is 27. */

.red {
  background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(162, 27, 27) 100%);
  box-shadow: 5px 5px red;
  box-shadow: -5px -5px red;

  /* If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher the value of blurRadius, the greater the blurring effect is.

In the .green CSS rule, add the box-shadow property with the values 5px for offsetX, 5px for offsetY, 5px for blurRadius, and green for color. */
box-shadow: 0 0 20px 0 red;

/* Next, update the color value of the red marker's box-shadow property.

Replace the named color with the rgba function. Use the values 83 for red, 14 for green, 14 for blue and 0.8 for the alpha channel. */

box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);

/* The shadows for your green and blue markers will have the same position, blur, and spread. The only difference will be the colors.

In the .green and .blue CSS rules, update the values for the box-shadow properties so offsetX is 0,offsetY is 0, blurRadius is 20px, and spreadRadius is 0. Leave the colors as green and blue for now. */

}

/* In the .green CSS rule, change the background-color property to background. */

.green {
  background: #007F00;
  box-shadow: 5px 5px 5px green;

/* Like blurRadius, spreadRadius defaults to 0 if it isn't included.

Practice by adding a 5 pixel shadow directly around the blue marker.

In the .blue CSS rule, add the box-shadow property with the values 0 for offsetX, 0 for offsetY, 0 for blurRadius, 5px for spreadRadius, and blue for color. */

box-shadow: 0 0 20px 0 green;

}

.green {
  background: linear-gradient(180deg, #55680D, #71F53E, #116C31);
}

/* Remove Linear-gradient direction from .red and .green css */

/* If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from top to bottom, or along a 180 degree line, by default.

Clean up your code a little more by removing the gradientDirection argument from both linear-gradient functions. */

.red {
  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
}

.green {
  background: linear-gradient(#55680D, #71F53E, #116C31);
  box-shadow: 0 0 20px 0 #3B7E20CC;

}

/* Use the linear-gradient function, and pass in the hsl function with the values 186 for hue, 76% for saturation, and 16% for lightness as the first color argument. */

.blue {
  background: linear-gradient( hsl(186, 76%, 16%));
  box-shadow: 0 0 20px 0 hsl(223, 59%, 31%);

}
/* update like this */
.blue {
  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
  box-shadow: 0 0 0 5px blue;

  /* Now that you're familiar with the box-shadow property you can finalize the shadows, starting with the one for the red marker.

In the .red CSS rule, update the values for the box-shadow property so offsetX is 0,offsetY is 0, blurRadius is 20px, spreadRadius is 0, and color is red. Remember that you don't need to add units to a zero value. */
box-shadow: 0 0 20px 0 blue;

/* For the green marker's box-shadow property, replace the named color with a hex color code. Use the values 3B for red, 7E for green, 20 for blue, and CC for the alpha channel. */


}

.sleeve{
  width: 110px;
  height: 25px;
  background-color: white;
  opacity: 0.5;
  /* or */
  background-color: rgba(255,255,255,0.5);
  border-left-width: 10px;

  /* Borders have several styles to choose from. You can make your border a solid line, but you can also use a dashed or dotted line if you prefer. Solid border lines are probably the most common.

In the .sleeve CSS rule, add the border-left-style property with the value solid. */
border-left-style: solid;
border-left-color: black;

/* The border-left shorthand property lets you to set the left border's width, style, and color at the same time.

Here is the syntax:

border-left: width style color;
In the .sleeve CSS rule, replace the border-left-width, border-left-style, and border-left-color properties with the border-left shorthand property. The values for the width, style, and color of the left border should be the same. */
border-left: 10px solid black;

/* Your marker is looking good. But to make it look even more realistic, you can change the border style to double solid borders.

For the border-left shorthand property, change the border style value from solid to double. */

border-left: 10px double black;

/* The black color of your border looks pretty harsh against the more transparent sleeve. You can use an alpha channel to lower the opacity of the black border.

For the border-left shorthand property, use the rgba function to set the color value to pure black with 75% opacity. */
border-left: 10px double rgba(0,0,0,0.75);

}

.cap{
  width: 60px;
  height: 25px;
}

.sleeve, .cap{
  display: inline-block;
}

/* Awesome. Your red marker is looking good. Now all you need to do is add the caps and sleeves to your other markers.

Add a cap and sleeve to both the green and blue markers. You can just copy the div elements from the red marker and paste them into the other two markers. */

/* spreadRadius value to spread out the reach of the shadow. More on that later.

Start by adding a simple shadow to the red marker.

In the .red CSS rule, add the box-shadow property with the values 5px for offsetX, 5px for offsetY, and red for color. */

